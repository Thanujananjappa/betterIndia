import twilio from 'twilio';
import MissingPerson from '../models/MissingPerson';
import { BlockchainService } from '../blockchain/blockchainService';

export interface WhatsAppMessage {
  from: string;
  body: string;
  mediaUrl?: string;
  timestamp: Date;
  language?: string;
}

export interface ProcessedReport {
  success: boolean;
  reportId?: string;
  message: string;
  confidence: number;
}

export class WhatsAppService {
  private client: twilio.Twilio;
  private blockchainService: BlockchainService;
  private supportedLanguages: string[] = [
    'hi', 'en', 'ta', 'te', 'mr', 'bn', 'gu', 'kn', 'ml', 'pa', 'or', 'as'
  ];

  constructor() {
    const accountSid = process.env.TWILIO_ACCOUNT_SID;
    const authToken = process.env.TWILIO_AUTH_TOKEN;
    
    if (!accountSid || !authToken) {
      console.warn('‚ö†Ô∏è Twilio credentials not found. WhatsApp service will be limited.');
      this.client = null as any;
    } else {
      this.client = twilio(accountSid, authToken);
      console.log('‚úÖ WhatsApp service initialized with Twilio');
    }

    // Initialize blockchain service
    this.blockchainService = new BlockchainService({
      rpcUrl: process.env.ETHEREUM_RPC_URL || 'https://sepolia.infura.io/v3/your-project-id',
      privateKey: process.env.ETHEREUM_PRIVATE_KEY || 'mock-key',
      contractAddress: process.env.CONTRACT_ADDRESS || 'mock-address',
      chainId: parseInt(process.env.CHAIN_ID || '11155111')
    });
  }

  /**
   * Process incoming WhatsApp message and extract missing person information
   */
  async processMessage(message: WhatsAppMessage): Promise<ProcessedReport> {
    try {
      console.log(`üì± Processing WhatsApp message from ${message.from}`);

      // Detect language
      const detectedLanguage = this.detectLanguage(message.body);
      
      // Extract information using NLP/AI
      const extractedInfo = await this.extractInformation(message.body, detectedLanguage);
      
      if (!extractedInfo.isValid) {
        return {
          success: false,
          message: this.getResponseMessage('invalid_format', detectedLanguage),
          confidence: 0
        };
      }

      // Create missing person report
      const missingPerson = new MissingPerson({
        name: extractedInfo.name,
        age: extractedInfo.age,
        gender: extractedInfo.gender,
        lastSeen: extractedInfo.lastSeen,
        lastSeenLocation: extractedInfo.location,
        reportedByPhone: message.from,
        photo: message.mediaUrl || '',
        description: extractedInfo.description,
        clothing: {
          color: extractedInfo.clothingColor || 'unknown',
          type: extractedInfo.clothingType || 'unknown'
        },
        physicalFeatures: {
          height: extractedInfo.height || 'unknown',
          weight: extractedInfo.weight || 'unknown',
          hairColor: extractedInfo.hairColor || 'unknown',
          eyeColor: extractedInfo.eyeColor || 'unknown'
        },
        languages: [detectedLanguage],
        priority: this.calculatePriority(extractedInfo),
        agentActivity: [{
          agent: 'report',
          action: 'whatsapp_report_received',
          timestamp: new Date(),
          details: `Report received via WhatsApp in ${detectedLanguage}`
        }]
      });

      // Store on blockchain
      try {
        const dataHash = this.blockchainService.generateDataHash(missingPerson.toObject());
        const metadata = JSON.stringify({
          type: 'missing_person_report',
          timestamp: new Date().toISOString(),
          source: 'whatsapp'
        });
        
        await this.blockchainService.storeDataHash(dataHash, metadata);
        missingPerson.blockchainHash = dataHash;
        
        console.log(`üîó Report stored on blockchain with hash: ${dataHash}`);
      } catch (blockchainError) {
        console.warn('‚ö†Ô∏è Failed to store on blockchain, continuing with database storage');
      }

      // Save to database
      await missingPerson.save();

      // Send confirmation message
      await this.sendConfirmationMessage(message.from, (missingPerson._id as any).toString(), detectedLanguage);

      return {
        success: true,
        reportId: (missingPerson._id as any).toString(),
        message: this.getResponseMessage('report_created', detectedLanguage),
        confidence: extractedInfo.confidence
      };

    } catch (error) {
      console.error('‚ùå Error processing WhatsApp message:', error);
      return {
        success: false,
        message: this.getResponseMessage('error_occurred', 'en'),
        confidence: 0
      };
    }
  }

  /**
   * Extract information from message text using AI/NLP
   */
  private async extractInformation(text: string, language: string): Promise<any> {
    // This would integrate with OpenAI or other NLP service
    // For now, using basic pattern matching
    
    const patterns = {
      name: /(?:name|‡§®‡§æ‡§Æ|‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç|‡∞™‡±á‡∞∞‡±Å)\s*[:\-]?\s*([^\n,]+)/i as RegExp,
      age: /(?:age|‡§â‡§Æ‡•ç‡§∞|‡Æµ‡ÆØ‡Æ§‡ØÅ|‡∞µ‡∞Ø‡∞∏‡±ç‡∞∏‡±Å)\s*[:\-]?\s*(\d+)/i as RegExp,
      gender: /(?:gender|‡§≤‡§ø‡§Ç‡§ó|‡Æ™‡Ææ‡Æ≤‡Æø‡Æ©‡ÆÆ‡Øç|‡∞≤‡∞ø‡∞Ç‡∞ó‡∞Ç)\s*[:\-]?\s*(male|female|‡§™‡•Å‡§∞‡•Å‡§∑|‡§Æ‡§π‡§ø‡§≤‡§æ|‡ÆÜ‡Æ£‡Øç|‡Æ™‡ØÜ‡Æ£‡Øç|‡∞Æ‡∞ó|‡∞Ö‡∞Æ‡±ç‡∞Æ‡∞æ‡∞Ø‡∞ø)/i as RegExp,
      location: /(?:location|‡§∏‡•ç‡§•‡§æ‡§®|‡Æá‡Æü‡ÆÆ‡Øç|‡∞™‡±ç‡∞∞‡∞¶‡±á‡∞∂‡∞Ç)\s*[:\-]?\s*([^\n,]+)/i as RegExp,
      lastSeen: /(?:last seen|last|‡§Ö‡§Ç‡§§‡§ø‡§Æ|‡Æï‡Æü‡Øà‡Æö‡Æø|‡∞ö‡∞ø‡∞µ‡∞∞‡∞ø)\s*[:\-]?\s*([^\n,]+)/i as RegExp
    } as const;

    const extracted = {
      name: '',
      age: 0,
      gender: 'unknown',
      location: '',
      lastSeen: new Date(),
      description: text,
      clothingColor: 'unknown',
      clothingType: 'unknown',
      height: 'unknown',
      weight: 'unknown',
      hairColor: 'unknown',
      eyeColor: 'unknown',
      isValid: false,
      confidence: 0
    };

    let confidence = 0;
    let validFields = 0;

    // Extract name
    const nameMatch = text.match(patterns.name);
    if (nameMatch) {
      extracted.name = (nameMatch[1] as string).trim();
      confidence += 25;
      validFields++;
    }

    // Extract age
    const ageMatch = text.match(patterns.age);
    if (ageMatch) {
      extracted.age = parseInt(ageMatch[1] as string);
      confidence += 20;
      validFields++;
    }

    // Extract location
    const locationMatch = text.match(patterns.location);
    if (locationMatch) {
      extracted.location = (locationMatch[1] as string).trim();
      confidence += 25;
      validFields++;
    }

    // Basic validation
    if (validFields >= 2) {
      extracted.isValid = true;
      extracted.confidence = Math.min(confidence, 100);
    }

    return extracted;
  }

  /**
   * Detect language from message text
   */
  private detectLanguage(text: string): string {
    // Simple language detection based on common words
    const languagePatterns = {
      hi: /(?:‡§π‡•à|‡§ï‡§æ|‡§ï‡•Ä|‡§Æ‡•á‡§Ç|‡§∏‡•á|‡§ï‡•ã|‡§™‡§∞|‡§ï‡•á|‡§π‡•à‡§Ç|‡§•‡§æ|‡§•‡•Ä)/,
      ta: /(?:‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ|‡Æá‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æø‡Æ±‡Æ§‡ØÅ|‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ|‡Æ™‡Øã‡Æï‡Æø‡Æ±‡Æ§‡ØÅ|‡Æµ‡Æ∞‡ØÅ‡Æï‡Æø‡Æ±‡Æ§‡ØÅ)/,
      te: /(?:‡∞â‡∞Ç‡∞¶‡∞ø|‡∞â‡∞®‡±ç‡∞®|‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®|‡∞µ‡±Ü‡∞≥‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®|‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®)/,
      mr: /(?:‡§Ü‡§π‡•á|‡§ö‡§æ|‡§ö‡•Ä|‡§Æ‡§ß‡•ç‡§Ø‡•á|‡§™‡§æ‡§∏‡•Ç‡§®|‡§≤‡§æ|‡§µ‡§∞|‡§ö‡•á|‡§Ü‡§π‡•á‡§§|‡§π‡•ã‡§§‡§æ|‡§π‡•ã‡§§‡•Ä)/,
      bn: /(?:‡¶Ü‡¶õ‡ßá|‡¶è‡¶∞|‡¶è‡¶∞|‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá|‡¶•‡ßá‡¶ï‡ßá|‡¶ï‡ßá|‡¶â‡¶™‡¶∞|‡¶è‡¶∞|‡¶Ü‡¶õ‡ßá‡¶®|‡¶õ‡¶ø‡¶≤|‡¶õ‡¶ø‡¶≤‡ßã)/
    };

    for (const [lang, pattern] of Object.entries(languagePatterns)) {
      if (pattern.test(text)) {
        return lang;
      }
    }

    return 'en'; // Default to English
  }

  /**
   * Calculate priority based on extracted information
   */
  private calculatePriority(info: any): 'low' | 'medium' | 'high' | 'critical' {
    let score = 0;
    
    if (info.age && info.age < 18) score += 3; // Child
    if (info.age && info.age > 65) score += 2; // Elderly
    if (info.medicalInfo) score += 2; // Medical condition
    
    if (score >= 5) return 'critical';
    if (score >= 3) return 'high';
    if (score >= 1) return 'medium';
    return 'low';
  }

  /**
   * Send confirmation message to user
   */
  private async sendConfirmationMessage(phone: string, reportId: string, language: string): Promise<void> {
    if (!this.client) {
      console.warn('‚ö†Ô∏è Twilio client not available, skipping confirmation message');
      return;
    }

    try {
      const message = this.getResponseMessage('report_created', language);
      
      await this.client.messages.create({
        body: message,
        from: `whatsapp:${process.env.TWILIO_WHATSAPP_NUMBER}`,
        to: `whatsapp:${phone}`
      });

      console.log(`‚úÖ Confirmation message sent to ${phone}`);
    } catch (error) {
      console.error('‚ùå Failed to send confirmation message:', error);
    }
  }

  /**
   * Get response message in appropriate language
   */
  private getResponseMessage(type: 'report_created' | 'invalid_format' | 'error_occurred', language: string): string {
    const messages: Record<'report_created' | 'invalid_format' | 'error_occurred', Record<string, string>> = {
      report_created: {
        en: 'Thank you! Your missing person report has been received and is being processed. We will contact you soon.',
        hi: '‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§Ü‡§™‡§ï‡•Ä ‡§ó‡•Å‡§Æ‡§∂‡•Å‡§¶‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ó‡§à ‡§π‡•à ‡§î‡§∞ ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡•Ä ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§π‡§Æ ‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä ‡§Ü‡§™‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§',
        ta: '‡Æ®‡Æ©‡Øç‡Æ±‡Æø! ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡Ææ‡Æ£‡Ææ‡ÆÆ‡Æ≤‡Øç ‡Æ™‡Øã‡Æ© ‡Æ®‡Æ™‡Æ∞‡Øç ‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà ‡Æ™‡ØÜ‡Æ±‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Ææ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æï‡Æø‡Æ±‡Æ§‡ØÅ. ‡Æ®‡Ææ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æµ‡Æø‡Æ∞‡Øà‡Æµ‡Æø‡Æ≤‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ ‡Æï‡Øä‡Æ≥‡Øç‡Æµ‡Øã‡ÆÆ‡Øç.',
        te: '‡∞ß‡∞®‡±ç‡∞Ø‡∞µ‡∞æ‡∞¶‡∞æ‡∞≤‡±Å! ‡∞Æ‡±Ä ‡∞ï‡∞®‡∞ø‡∞™‡∞ø‡∞Ç‡∞ö‡∞®‡∞ø ‡∞µ‡±ç‡∞Ø‡∞ï‡±ç‡∞§‡∞ø ‡∞®‡∞ø‡∞µ‡±á‡∞¶‡∞ø‡∞ï ‡∞∏‡±ç‡∞µ‡±Ä‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞™‡±ç‡∞∞‡∞æ‡∞∏‡±Ü‡∞∏‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡±Å‡∞§‡±ã‡∞Ç‡∞¶‡∞ø. ‡∞Æ‡±á‡∞Æ‡±Å ‡∞§‡±ç‡∞µ‡∞∞‡∞≤‡±ã ‡∞Æ‡∞ø‡∞Æ‡±ç‡∞Æ‡∞≤‡±ç‡∞®‡∞ø ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞Æ‡±Å.'
      },
      invalid_format: {
        en: 'Please provide the missing person\'s name, age, and last seen location. For example: "Name: John, Age: 25, Location: Mumbai Central"',
        hi: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§ó‡•Å‡§Æ‡§∂‡•Å‡§¶‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡§æ ‡§®‡§æ‡§Æ, ‡§â‡§Æ‡•ç‡§∞ ‡§î‡§∞ ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§¶‡•á‡§ñ‡•á ‡§ú‡§æ‡§®‡•á ‡§ï‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§â‡§¶‡§æ‡§π‡§∞‡§£: "‡§®‡§æ‡§Æ: ‡§ú‡•â‡§®, ‡§â‡§Æ‡•ç‡§∞: 25, ‡§∏‡•ç‡§•‡§æ‡§®: ‡§Æ‡•Å‡§Ç‡§¨‡§à ‡§∏‡•á‡§Ç‡§ü‡•ç‡§∞‡§≤"',
        ta: '‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æï‡Ææ‡Æ£‡Ææ‡ÆÆ‡Æ≤‡Øç ‡Æ™‡Øã‡Æ© ‡Æ®‡Æ™‡Æ∞‡Æø‡Æ©‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç, ‡Æµ‡ÆØ‡Æ§‡ØÅ ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æï‡Æü‡Øà‡Æö‡Æø‡ÆØ‡Ææ‡Æï ‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æá‡Æü‡Æ§‡Øç‡Æ§‡Øà ‡Æµ‡Æ¥‡Æô‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç. ‡Æé‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æï‡Øç‡Æï‡Ææ‡Æü‡Øç‡Æü‡ØÅ: "‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç: ‡Æú‡Ææ‡Æ©‡Øç, ‡Æµ‡ÆØ‡Æ§‡ØÅ: 25, ‡Æá‡Æü‡ÆÆ‡Øç: ‡ÆÆ‡ØÅ‡ÆÆ‡Øç‡Æ™‡Øà ‡Æö‡ØÜ‡Æ©‡Øç‡Æü‡Øç‡Æ∞‡Æ≤‡Øç"',
        te: '‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞ï‡∞®‡∞ø‡∞™‡∞ø‡∞Ç‡∞ö‡∞®‡∞ø ‡∞µ‡±ç‡∞Ø‡∞ï‡±ç‡∞§‡∞ø ‡∞™‡±á‡∞∞‡±Å, ‡∞µ‡∞Ø‡∞∏‡±ç‡∞∏‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ö‡∞ø‡∞µ‡∞∞‡∞ø‡∞ó‡∞æ ‡∞ö‡±Ç‡∞∏‡∞ø‡∞® ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞Ö‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø. ‡∞â‡∞¶‡∞æ‡∞π‡∞∞‡∞£: "‡∞™‡±á‡∞∞‡±Å: ‡∞ú‡∞æ‡∞®‡±ç, ‡∞µ‡∞Ø‡∞∏‡±ç‡∞∏‡±Å: 25, ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞Ç: ‡∞Æ‡±Å‡∞Ç‡∞¨‡±à ‡∞∏‡±Ü‡∞Ç‡∞ü‡±ç‡∞∞‡∞≤‡±ç"'
      },
      error_occurred: {
        en: 'Sorry, an error occurred while processing your report. Please try again or contact our support team.',
        hi: '‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§Ü‡§™‡§ï‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡•ã ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡§∞‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ü‡•Ä‡§Æ ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§',
        ta: '‡ÆÆ‡Æ©‡Øç‡Æ©‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç, ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà‡ÆØ‡Øà ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Ææ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æ™‡Æø‡Æ¥‡Øà ‡Æè‡Æ±‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ. ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡ÆÆ‡ØÄ‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æé‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÜ‡Æ§‡Æ∞‡Æµ‡ØÅ ‡Æï‡ØÅ‡Æ¥‡ØÅ‡Æµ‡Øà ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥‡Æµ‡ØÅ‡ÆÆ‡Øç.',
        te: '‡∞ï‡±ç‡∞∑‡∞Æ‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø, ‡∞Æ‡±Ä ‡∞®‡∞ø‡∞µ‡±á‡∞¶‡∞ø‡∞ï‡∞®‡±Å ‡∞™‡±ç‡∞∞‡∞æ‡∞∏‡±Ü‡∞∏‡±ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞≤‡±ã‡∞™‡∞Ç ‡∞ú‡∞∞‡∞ø‡∞ó‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø ‡∞≤‡±á‡∞¶‡∞æ ‡∞Æ‡∞æ ‡∞Æ‡∞¶‡±ç‡∞¶‡∞§‡±Å ‡∞ú‡∞ü‡±ç‡∞ü‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.'
      }
    };

    return messages[type]?.[language] || messages[type]?.en || 'Message not available';
  }

  /**
   * Get service status
   */
  getStatus(): { connected: boolean; twilio: boolean; blockchain: boolean } {
    return {
      connected: true,
      twilio: !!this.client,
      blockchain: this.blockchainService.getConnectionStatus()
    };
  }
}
